package com.sport.server.license;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;

/**
 * This class represents the raw portions of an RSA style key.  The raw portions
 * consist of the modulus and exponent values.  This class does not differ between
 * a public and private RSA key.  The main functionality of this class is to
 * store the necessary components for re-creating an RSAPublicKey or RSAPrivateKey.
 * The components may be stored and retrieved from another location.
 */
public class RawRSAKey {
	/**
	 * This field represents the empty argument for the parts that make up the key.
	 * This value will be returned if the key parts (modulus and exponent) are not
	 * initialized.
	 */
	private static final BigInteger emptyBigInt = new BigInteger("0");
	
	private BigInteger mModulus;
	private BigInteger mExponent;
	
   /**
    * Creates a RawRSAKey object with the supplied modulus and exponent values.
    *
    * @param	pModulus		The modulus for this RSA key.
    * @param	pExponent	The exponent portion of this RSA key.
    */
   public RawRSAKey(BigInteger pModulus, BigInteger pExponent) {
		mModulus = pModulus;
		mExponent = pExponent;
	}
   
   /**
    * Returns an instance of the raw RSA key object generated by reading the 
    * parts from the supplied file name.
    *
    * @param	pFileName		The file name containing the key data to read.
    * @throws	IOException		if there is any problem reading the key file.
    */
   public static RawRSAKey getInstance(String pFileName) throws IOException {
		BufferedReader keyIn = new BufferedReader(new FileReader(pFileName));

		BigInteger keyModulus = new BigInteger(keyIn.readLine(), 16);
		BigInteger keyExponent = new BigInteger(keyIn.readLine(), 16);

		keyIn.close();
		
		return new RawRSAKey(keyModulus, keyExponent);
	}
	
	/**
	 * Returns the modulus portion of the RSA key represented by this object.
	 * @return		BigInteger representing the modulus, or the empty argument
	 *					if not initialized.
	 * @see	#emptyBigInt
	 */
	public BigInteger getModulus() {
		if ( mModulus == null ) {
			return emptyBigInt;
		}
		else {
			return mModulus;
		}
	}
	
	/**
	 * Returns the exponent portion of the RSA key represented by this object.
	 * @return		BigInteger representing the modulus, or the empty argument if not 
	 *					initialized.
	 * @see	#emptyBigInt
	 */
	public BigInteger getExponent() {
		if ( mExponent == null ) {
			return emptyBigInt;
		}
		else {
			return mExponent;
		}
	}
	
	public String toString() {
		return mModulus.toString(16).toUpperCase() + "\n" + mExponent.toString(16).toUpperCase();
	}
}
